#include "philo.h"

static void	unlock_chopsticks(t_philo *think)
{
	pthread_mutex_unlock(think->l_chop);
	pthread_mutex_unlock(think->r_chop);
	search_for_truth(think);
}
/*
static void unlock_1_chop(t_philo *think, int lock_left, int lock_right)
{
printf("do i go here\n");
	if (lock_left == 0)
	{
		display_status("FORK", think);
		pthread_mutex_unlock(think->l_chop);
	}
	if (lock_right == 0)
	{
		display_status("FORK", think);
		pthread_mutex_unlock(think->r_chop);
	}
}
*/
/*
static int	take_chopsticks(t_philo *think)
{
	if (think->data->waisted != 0)
		return (-1);
	if (think->data->think_nb == 1)
	{
		pthread_mutex_lock(think->r_chop);
		display_status("FORK", think);
		return (-1);
	}
	if (pthread_mutex_lock(think->r_chop) == 0 
		&& pthread_mutex_lock(think->l_chop) == 0)
	{
		display_status("FORK", think);
		display_status("FORK", think);
		return (0);
	}
	else
	{
		unlock_chopsticks(think);
		return (-1);
	}
}
*/

static void	take_chopsticks(t_philo *think)
{
	pthread_mutex_lock(think->r_chop);
	display_status("FORK", think);
	pthread_mutex_lock(think->l_chop);
	display_status("FORK", think);
}

void	eat(t_philo *think)
{
	if (think->data->waisted == 0)
	{
		take_chopsticks(think);
		pthread_mutex_lock(&think->lock);
		think->eating = 1;
		display_status("EAT", think);
		think->death_end = get_time() + think->data->death_time;
		go_sleep(think->data->eat_time);
		think->eating = 0;
		think->eat_count += 1;
		pthread_mutex_unlock(&think->lock);
		unlock_chopsticks(think);
//printf("----------think_id %d EAT_COUNT [%d] ---------\n", think->think_id, think->eat_count);
	}
}
